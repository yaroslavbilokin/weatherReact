{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","city","src","icon","alt","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","sunrise","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","console","log","weather","iconUrl","sys","date","Date","sunset_date","getHours","getMinutes","getSeconds","setState","main","this","Math","floor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uPASeA,EAPF,kBACT,6BACI,oEACA,+PCIOC,EAPF,SAACC,GAAD,OACT,0BAAMC,SAAUD,EAAME,eAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3C,2ECcOC,EAjBC,SAACN,GACb,OACI,yBAAKO,UAAU,eACVP,EAAMQ,MACH,6BACI,yBAAKC,IAAKT,EAAMU,KAAMC,IAAI,aAC1B,4FAAgBX,EAAMQ,KAAtB,KAA8BR,EAAMY,SACpC,kGAAiBZ,EAAMa,MACvB,wDAAUb,EAAMc,SAAhB,4CACA,6FAAiBd,EAAMe,SAG/B,uBAAGR,UAAU,SAASP,EAAMgB,SCTlCC,EAAU,mCAwFDC,E,4MApFbC,MAAQ,CACNN,UAAMO,EACNZ,UAAMY,EACNR,aAASQ,EACTC,aAASD,EACTL,YAAQK,EACRJ,WAAOI,EACPV,UAAMU,G,EAGRE,e,uCAAiB,WAAOC,GAAP,6BAAAC,EAAA,yDACbD,EAAEE,mBAKIjB,EAAOe,EAAEG,OAAOC,SAASnB,KAAKoB,OANvB,iCASWC,MAAM,qDAAD,OAC4BrB,EAD5B,kBAC0CS,EAD1C,kBAThB,cASLa,EATK,gBAYQA,EAAQC,OAZhB,OAYLC,EAZK,OAaXC,QAAQC,IAAIF,GACNG,EAAUH,EAAKG,QAAQ,GACvBC,EAAU,mCAAqCD,EAAQzB,KAAO,OAC9DK,EAASiB,EAAKK,IAAItB,OAClBuB,EAAO,IAAIC,KAAY,IAAPxB,GAChByB,EAAcF,EAAKG,WAAa,IAAMH,EAAKI,aAAe,IAAMJ,EAAKK,aAC3EV,QAAQC,IAAIM,GAEZ,EAAKI,SAAS,CACZ/B,KAAMmB,EAAKa,KAAKhC,KAChBL,KAAMwB,EAAK5B,KACXQ,QAASoB,EAAKK,IAAIzB,QAClBE,SAAUkB,EAAKa,KAAK/B,SACpBC,OAAQyB,EACRxB,MAAO,GACPN,KAAM0B,IA5BG,wBAgCX,EAAKQ,SAAS,CACZ/B,UAAMO,EACNZ,UAAMY,EACNR,aAASQ,EACTC,aAASD,EACTL,YAAQK,EACRJ,MAAO,8GAtCE,4C,6GA8Cf,OACE,yBAAKT,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAML,cAAe4C,KAAKxB,iBAC1B,kBAAC,EAAD,CACET,KAAMkC,KAAKC,MAAMF,KAAK3B,MAAMN,MAC5BL,KAAMsC,KAAK3B,MAAMX,KACjBI,QAASkC,KAAK3B,MAAMP,QACpBE,SAAUiC,KAAKC,MAA0B,QAApBF,KAAK3B,MAAML,UAChCC,OAAQ+B,KAAK3B,MAAMJ,OACnBL,KAAMoC,KAAK3B,MAAMT,KACjBM,MAAO8B,KAAK3B,MAAMH,iB,GA3ElBiC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnD,GACLiB,QAAQjB,MAAMA,EAAMoD,a","file":"static/js/main.f9391a90.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Info = () => (\n    <div>\n        <h2>Погода</h2>\n        <p>Дізнайся погоду в будь-якому куточку світу</p>\n    </div>\n)\n\nexport default Info;","import React from \"react\";\n\nconst Form = (props) => (\n    <form onSubmit={props.weatherMethod}>\n        <input type=\"text\" name=\"city\" placeholder=\"Місто\"/>\n        <button>Вперед!</button>\n    </form>\n)\n\nexport default Form;","import React from \"react\";\n\nconst Weather = (props) => {\n    return (\n        <div className=\"infoWeather\">\n            {props.city &&\n                <div>\n                    <img src={props.icon} alt=\"smth alt\"/>\n                    <p>Розміщення: {props.city}, {props.country}</p>\n                    <p>Температура: {props.temp}</p>\n                    <p>Тиск: {props.pressure} мм.рт.ст.</p>\n                    <p>Захід сонця: {props.sunset}</p>\n                </div>\n            }\n            <p className=\"error\">{props.error}</p>\n        </div>\n    );\n}\n\nexport default Weather;","import React from \"react\";\nimport Info from \"./components/info\"\nimport Form from \"./components/form\"\nimport Weather from \"./components/weather\"\n\nconst API_KEY = \"9252cbb87e904af3fa32880898422f10\";\n\nclass App extends React.Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    error: undefined,\n    icon: undefined\n  };\n\n  gettingWeather = async (e) => {\n      e.preventDefault();\n      //5days - Forecast\n      // const api_url = await fetch(\n      //   `https://api.openweathermap.org/data/2.5/forecast?q=Kiev&appid=${API_KEY}`\n      // );\n      const city = e.target.elements.city.value;\n      \n      if(city) {\n        const api_url = await fetch(\n          `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`\n        );\n        const data = await api_url.json();\n        console.log(data);\n        const weather = data.weather[0];\n        const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\n        const sunset = data.sys.sunset;\n        const date = new Date(sunset*1000);\n        const sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n        console.log(sunset_date)\n          \n        this.setState({\n          temp: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          pressure: data.main.pressure,\n          sunset: sunset_date,\n          error: \"\",\n          icon: iconUrl\n        });\n        \n      } else {\n        this.setState({\n          temp: undefined,\n          city: undefined,\n          country: undefined,\n          sunrise: undefined,\n          sunset: undefined,\n          error: \"Введіть назву міста!\"\n        })\n      }\n\n      \n  }\n  \n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-sm-5 info\">\n                <Info />\n              </div>\n              <div className=\"col-sm-7 form\">\n                <Form weatherMethod={this.gettingWeather}/>\n                <Weather \n                  temp={Math.floor(this.state.temp)}\n                  city={this.state.city}\n                  country={this.state.country}\n                  pressure={Math.floor(this.state.pressure*0.750062)}\n                  sunset={this.state.sunset}\n                  icon={this.state.icon}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}